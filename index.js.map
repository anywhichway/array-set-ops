{"mappings":"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","sources":["src/index.js","src/difference.js","src/loop-functions.js","src/intersection.js","src/symmetric-difference.js","src/union.js","src/is-disjoint-from.js","src/is-superset-of.js","src/is-subset-of.js"],"sourcesContent":["import difference from \"./difference.js\";\r\nimport intersection from \"./intersection.js\";\r\nimport symmetricDifference from \"./symmetric-difference.js\";\r\nimport union from \"./union.js\";\r\nimport isDisjointFrom from \"./is-disjoint-from.js\";\r\nimport isSupersetOf from \"./is-superset-of.js\";\r\nimport isSubsetOf from \"./is-subset-of.js\";\r\nimport loopFunctions from \"./loop-functions.js\";\r\n\r\nconst classPrototype = {\r\n    difference,\r\n    intersection,\r\n    symmetricDifference,\r\n    union,\r\n    isSubsetOf,\r\n    isSupersetOf,\r\n    isDisjointFrom\r\n}\r\n\r\n\r\n\r\nexport {loopFunctions,classPrototype,classPrototype as default}","/* MIT License\r\nCopyright (c) 2023 Simon Y. Blackwell\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\nimport {loopFunctions} from \"./loop-functions.js\";\r\n\r\nfunction difference(...args) {\r\n    let base = this;\r\n    const set = !Array.isArray(base),\r\n        result = new Set();\r\n    if(set) base = [...base];\r\n    for(const item of base) {\r\n        if(!args.some((arg,i) => {\r\n            if(Array.isArray(arg)) arg = args[i] = new Set(arg);\r\n            return arg.has(item)\r\n        })) {\r\n            result.add(item);\r\n        }\r\n    }\r\n    return set ? result : [...result]\r\n}\r\n\r\nexport {difference,difference as default}","const loopFunctions = {\r\n    forEach(f) {\r\n        return [...this].forEach(f)\r\n    },\r\n    map(f) {\r\n        return new this.constructor([...this].map(f))\r\n    },\r\n    reduce(f) {\r\n        return [...this].reduce(f)\r\n    }\r\n}\r\n\r\nexport {loopFunctions,loopFunctions as default};","/* MIT License\r\nCopyright (c) 2023 Simon Y. Blackwell\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\nconst shortest = (args) => {\r\n    const len = args.length;\r\n    let i = 0,\r\n        j = 0,\r\n        min = args[0].length;\r\n    for (; i < len; i++) {\r\n        if (args[i].length < min) {\r\n            min = args[i].length;\r\n            j = i;\r\n        }\r\n    }\r\n    return j;\r\n};\r\nfunction intersection(...args) {\r\n    args = [this,...args].map((arg) => Array.isArray(arg) ? arg : [...arg]);\r\n    const set = !Array.isArray(this),\r\n        shortestIndex = shortest(args),\r\n        maxlen = args.length - 1;\r\n    let memory = new Set(args[shortestIndex]);\r\n    for (let i=0; i<=maxlen; i++) {\r\n        if(i===shortestIndex) continue;\r\n        const found = new Set();\r\n        for(const item of args[i]) {\r\n            if(memory.has(item)) {\r\n                found.add(item);\r\n            }\r\n        }\r\n        if(found.size===0) return [];\r\n        if(found.size < memory.size) memory = found;\r\n    }\r\n    return set ? memory : [...memory];\r\n}\r\n\r\nexport {intersection,intersection as default};","/* MIT License\r\nCopyright (c) 2023 Simon Y. Blackwell\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\nimport intersection from \"./intersection.js\";\r\n\r\nfunction symmetricDifference(...args) {\r\n    const set = !Array.isArray(this),\r\n        result = new Set(),\r\n        intersects = intersection.apply(set ? this : new Set(this),args);\r\n    [this,...args].forEach((arg,i) => {\r\n        if(!Array.isArray(arg)) arg = [...arg];\r\n        for(const item of arg) {\r\n            if(!intersects.has(item)) {\r\n                result.add(item);\r\n            }\r\n        }\r\n    })\r\n    return set ? result : [...result]\r\n}\r\n\r\nexport {symmetricDifference,symmetricDifference as default}","/* MIT License\r\nCopyright (c) 2023 Simon Y. Blackwell\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\nfunction union(...iterables) {\r\n        iterables = [this,...iterables];\r\n        const set = !Array.isArray(this),\r\n            memory = new Set(),\r\n            results = [],\r\n            target = set ? memory : results;\r\n        let i = 0, k = 0,\r\n            length;\r\n        Object.defineProperty(target,\"forEach\",{\r\n            value:(f) => {\r\n                let i = 0; // avoid accessing length\r\n                for(const item of proxy) {\r\n                    f(item,i++,proxy);\r\n                }\r\n            }\r\n        });\r\n        Object.defineProperty(target,\"map\",{\r\n            value:(f) => {\r\n                const result = [];\r\n                let i = 0; // avoid accessing length\r\n                for(const item of proxy) {\r\n                    result[i] = f(item,i++,proxy);\r\n                }\r\n                return set ? new Set(result) : result;\r\n            }\r\n        });\r\n        Object.defineProperty(target,\"reduce\",{\r\n            value:(f,result) => {\r\n                let i = 0; // avoid accessing length\r\n                for(const item of proxy) {\r\n                    if(result===undefined) result = item;\r\n                    else result = f(result,item,i++,proxy);\r\n                }\r\n                return result;\r\n            }\r\n        });\r\n        const proxy = new Proxy(target,{\r\n            get(target,key) {\r\n                const type = typeof(key);\r\n                let item = target[key];\r\n                if(key!==\"length\" && key!==\"size\" && type!==\"symbol\") {\r\n                    if(item!=undefined) {\r\n                        if(typeof(item)===\"function\" && ![\"forEach\",\"map\",\"reduce\"].includes(key)) return item.bind(target);\r\n                        return item;\r\n                    }\r\n                    if(type===\"string\") {\r\n                        const num = parseInt(key);\r\n                        if(num+\"\"===key) {\r\n                            key = num;\r\n                        }\r\n                    }\r\n                    if(key<0 || key===Infinity) {\r\n                        throw new RangeError(`${key} is out of range`)\r\n                    }\r\n                }\r\n                if(key===\"length\" || key===\"size\") {\r\n                    if (length >= 0) {\r\n                        return length;\r\n                    }\r\n                    key = Infinity;\r\n                }\r\n                if(typeof(key)===\"number\") {\r\n                    if(key>=length) return;\r\n                    if(key<results.length) return results[key];\r\n                    const il = iterables.length;\r\n                    let item;\r\n                    while(k<il) {\r\n                        let array = iterables[k];\r\n                        if(!Array.isArray(array)) {\r\n                            array = [...array];\r\n                        }\r\n                        const al = array.length;\r\n                        while(key>=results.length && i<al) {\r\n                            item = array[i++];\r\n                            if(!memory.has(item)) {\r\n                                memory.add(item);\r\n                                results[results.length] = item;\r\n                            }\r\n                        }\r\n                        if(i===al) {\r\n                            i = 0;\r\n                            k++;\r\n                        }\r\n                        if(key<=results.length) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(k===il) {\r\n                        length = results.length;\r\n                    }\r\n                    return key===Infinity ? length : item;\r\n                }\r\n                if(type===\"symbol\" && key.toString()===\"Symbol(Symbol.iterator)\") {\r\n                    return () => {\r\n                        if(length>=0) {\r\n                            let l = 0;\r\n                            return {\r\n                                next() {\r\n                                    while(l<results.length) {\r\n                                        return {value:results[l++]}\r\n                                    }\r\n                                    return {done:true}\r\n                                }\r\n                            }\r\n                        }\r\n                        return {\r\n                            next() {\r\n                                while(k<iterables.length) {\r\n                                    let array = iterables[k];\r\n                                    if(!Array.isArray(array)) {\r\n                                        array = [...array];\r\n                                    }\r\n                                    while(i<array.length) {\r\n                                        const item = array[i++];\r\n                                        if(!memory.has(item)) {\r\n                                            memory.add(item);\r\n                                            results[results.length] = item;\r\n                                            return {value:item}\r\n                                        }\r\n                                    }\r\n                                    if(i===array.length) {\r\n                                        i = 0;\r\n                                        k++;\r\n                                    }\r\n                                }\r\n                                length = results.length;\r\n                                return {done:true}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return target[key];\r\n            }\r\n        })\r\n        return proxy;\r\n}\r\n\r\nexport {union,union as default};\r\n\r\n","/* MIT License\r\nCopyright (c) 2023 Simon Y. Blackwell\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\nfunction isDisjointFrom(...args) {\r\n    let base = this;\r\n    if(!Array.isArray(base)) base = [...base];\r\n    for(const item of base) {\r\n        if(args.some((arg,i) => {\r\n            if(Array.isArray(arg)) arg = args[i] = new Set(arg);\r\n            return arg.has(item);\r\n        })) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {isDisjointFrom,isDisjointFrom as default}","/* MIT License\r\nCopyright (c) 2023 Simon Y. Blackwell\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\nfunction isSupersetOf(...args){\r\n    let base = this;\r\n    if(Array.isArray(base)) base = new Set(base);\r\n    args = args.map((arg) => {\r\n        return Array.isArray(arg) ? [...new Set(arg)] : arg\r\n    });\r\n    for(const array of args) {\r\n        if(array.length>base.size) return false;\r\n        for(const item of array) {\r\n            if(!base.has(item)) return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {isSupersetOf,isSupersetOf as default}","/* MIT License\r\nCopyright (c) 2023 Simon Y. Blackwell\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\nfunction isSubsetOf(...args) {\r\n    let base = this;\r\n    if(Array.isArray(base)) base = [...new Set(base)];\r\n    args = args.map((arg) => {\r\n        return Array.isArray(arg) ? new Set(arg) : arg\r\n    });\r\n    for(const set of args) {\r\n        if(set.size<base.length) return false;\r\n        for(const item of base) {\r\n            if(!set.has(item)) return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {isSubsetOf,isSubsetOf as default}"],"names":[],"version":3,"file":"index.js.map"}